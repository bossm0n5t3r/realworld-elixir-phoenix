meta {
  name: Login and Remember Token
  type: http
  seq: 3
}

post {
  url: {{APIURL}}/users/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  X-Requested-With: XMLHttpRequest
}

body:json {
  {"user":{"email":"{{EMAIL}}", "password":"{{PASSWORD}}"}}
}

tests {
  const responseJSON = res.getBody();
  
  test('Response contains "user" property', function () {
    assert(responseJSON.hasOwnProperty('user'), true);
  });
  
  const user = responseJSON.user || {};
  
  test('User has "email" property', function () {
    assert(user.hasOwnProperty('email'), true);
  });
  test('User has "username" property', function () {
    assert(user.hasOwnProperty('username'), true);
  });
  test('User has "bio" property', function () {
    assert(user.hasOwnProperty('bio'), true);
  });
  test('User has "image" property', function () {
    assert(user.hasOwnProperty('image'), true);
  });
  test('User has "token" property', function () {
    assert(user.hasOwnProperty('token'), true);
  });
  
  if (user.hasOwnProperty('token')) {
    bru.setEnvVar('token', user.token);
  
    test('Global variable "token" has been set', function () {
      assert(bru.getEnvVar('token') === user.token, true);
    });
  }
  
}
